package guru.nicks.ratelimit;

import jakarta.servlet.ReadListener;
import jakarta.servlet.ServletInputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletRequestWrapper;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.util.StreamUtils;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Optional;

/**
 * Caches request body, which lets read it as many times as needed, e.g. in filters.
 * <p>
 * WARNING: can't be used for multipart requests - see {@code HttpRequestImpl#parseFormData} method: {@code readStarted}
 * is true after {@link HttpServletRequest#getInputStream()}, which doesn't let read the parts.
 */
public class MultipleTimesReadableHttpRequest extends HttpServletRequestWrapper {

    private final byte[] body;

    public MultipleTimesReadableHttpRequest(HttpServletRequest request) throws IOException {
        super(request);

        // see HttpRequestImpl.parseFormData(): readStarted is always true after getInputStream(), which doesn't let
        // read the parts
        Optional.ofNullable(request.getHeader(HttpHeaders.CONTENT_TYPE))
                .filter(value -> StringUtils.startsWithIgnoreCase(value, "multipart/form-data"))
                .ifPresent(contentType -> {
                    throw new IllegalArgumentException("Multipart requests can't be wrapped: " + contentType);
                });

        body = StreamUtils.copyToByteArray(request.getInputStream());
    }

    @Override
    public ServletInputStream getInputStream() {
        return new MultipleTimesReadableServletInputStream(body);
    }

    private static class MultipleTimesReadableServletInputStream extends ServletInputStream {

        private final InputStream inputStream;

        public MultipleTimesReadableServletInputStream(byte[] body) {
            inputStream = new ByteArrayInputStream(body);
        }

        @Override
        public boolean isFinished() {
            try {
                return inputStream.available() == 0;
            } catch (Exception e) {
                return false;
            }
        }

        @Override
        public boolean isReady() {
            return true;
        }

        @Override
        public void setReadListener(ReadListener listener) {
            throw new UnsupportedOperationException();
        }

        @Override
        public int read() throws IOException {
            return inputStream.read();
        }

    }

}
